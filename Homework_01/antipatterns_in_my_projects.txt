Bike-shed: т.к. при изучении нового сложно понять, что важно, а что вторично;
Boat anchor: порой комментирую ненужный сейчас код;
God object: на первых порах это было, сейчас стараюсь разделять ответственность;
Golden hammer: уверенности в универсальности кода нет, но получив в начале всего один молоток, сложно начать использовать другие, если не знаешь про них. Волей-неволей примеряешь его на все встречающиеся проблемы;
Hard code: побаиваюсь хардкодить, поэтому скорее всего сваливаюсь в Soft code;
Magic numbers and lines: как и God object, в начале обучения это использовала, сейчас стараюсь так не делать;
Premature optimization: применяю, к сожалению, и часто страдаю, потому что не видя всей картины начинаю пытаться переделать какую-то реализацию. К счастью, сейчас это все только на учебных проектах;
Reinventing the square wheel: местами применяю, потому что либо пока не знаю, что есть решение (хотя оно почти наверняка есть), но и не хочу просто копипастить и тем самым попадать в False mastery. На этапе обучения это скорее всего нормально;
Reinventing the wheel: аналогично предыдущему;
Soft code: поскольку еще как таковой архитектуры не давали, все проекты были "сейчас делаем то-то, что будет потом - неизвестно", поэтому непонятно, какая часть будет дописываться, меняться, расширяться. Из-за этого хотелось предусмотреть все, и из-за этого возникали проблемы;
Spaghetti code: первые проекты были именно с этим антипаттерном, сейчас стараюсь подходить осознаннее.
